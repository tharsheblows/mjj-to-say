<?php

namespace MJJWhy\JustToSay;

/**
 * Block related functionality and hooks.
 */
class Hooks {

	/**
	 * There's a better way to do this but this is easiest for now.
	 *
	 * @var array An array of the block names to hijack.
	 */
	public $blocks_to_hijack = [
		'mjj-why/just-to-say',
	];

	/**
	 * Add in all the WordPress php hooks.
	 *
	 * @return void
	 */
	public function add_hooks(){
		add_filter( 'render_block', [ $this, 'hijack_render_blocks' ], 10, 2 );
	}

	/**
	 * Hijack the rendering of these blocks, making a div which we will fill with our little app.
	 *
	 * @param null  $render A trigger to stop the block rendering process.
	 * @param array $block The array of the block data generated by the block editor.
	 * @return null|string If this is null, rendering continues in core, otherwise it uses the html string sent.
	 */
	public function hijack_render_blocks( $render, $block ){
		if ( in_array( $block['blockName'], $this->blocks_to_hijack, true ) ) {
			$attributes = wp_json_encode( $block['attrs'] );
			// I'm skipping innerContent, innerHTML and innerBlocks for now because I'm not using them.
			$classes = esc_html( str_replace( '/', ' ', $block['blockName'] ) ); // A bit delicate maybe.

			$render = "<div class='$classes' data-attr='$attributes'></div>";
		}
		return $render;
	}
}
